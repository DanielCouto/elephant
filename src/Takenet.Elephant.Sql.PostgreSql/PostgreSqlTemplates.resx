<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlterTableAddColumn" xml:space="preserve">
    <value>ALTER TABLE {tableName} ADD {columnDefinition}</value>
  </data>
  <data name="And" xml:space="preserve">
    <value>AND</value>
  </data>
  <data name="ColumnDefinition" xml:space="preserve">
    <value>{columnName} {sqlType} NOT NULL</value>
  </data>
  <data name="CreateTable" xml:space="preserve">
    <value>CREATE TABLE {tableName}
( 
{tableDefinition}
)</value>
  </data>
  <data name="DbTypeBinary" xml:space="preserve">
    <value>BYTEA</value>
  </data>
  <data name="DbTypeBoolean" xml:space="preserve">
    <value>BOOLEAN</value>
  </data>
  <data name="DbTypeDateTime" xml:space="preserve">
    <value>TIMESTAMP(3)</value>
  </data>
  <data name="DbTypeDateTimeOffset" xml:space="preserve">
    <value>TIMESTAMPTZ(3)</value>
  </data>
  <data name="DbTypeDouble" xml:space="preserve">
    <value>DOUBLE PRECISION</value>
  </data>
  <data name="DbTypeGuid" xml:space="preserve">
    <value>UUID</value>
  </data>
  <data name="DbTypeInt16" xml:space="preserve">
    <value>SMALLINT</value>
  </data>
  <data name="DbTypeInt32" xml:space="preserve">
    <value>INTEGER</value>
  </data>
  <data name="DbTypeInt64" xml:space="preserve">
    <value>BIGINT</value>
  </data>
  <data name="DbTypeString" xml:space="preserve">
    <value>VARCHAR({length})</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>DELETE FROM {tableName} WHERE {filter}</value>
  </data>
  <data name="DeleteAndInsertWhereNotExists" xml:space="preserve">
    <value>DELETE FROM {tableName} WHERE {filter}; 
INSERT INTO {tableName} ({columns}) 
SELECT {values}
WHERE NOT EXISTS ( SELECT 1 FROM {tableName} WHERE {filter} )</value>
  </data>
  <data name="DummyEqualsZero" xml:space="preserve">
    <value>@dummy = 0</value>
  </data>
  <data name="Equal" xml:space="preserve">
    <value>=</value>
  </data>
  <data name="Exists" xml:space="preserve">
    <value>SELECT CASE WHEN EXISTS ((SELECT 1 FROM {tableName} WHERE {filter})) THEN CAST(1 AS BOOLEAN) ELSE CAST(0 AS BOOLEAN) END</value>
  </data>
  <data name="GetTableColumns" xml:space="preserve">
    <value>SELECT COLUMN_NAME, CASE WHEN UDT_NAME IN ('varchar', 'timestamp', 'timestamptz') THEN UDT_NAME ELSE DATA_TYPE END AS DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = '{tableName}'</value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>&gt;</value>
  </data>
  <data name="GreaterThanOrEqual" xml:space="preserve">
    <value>&gt;=</value>
  </data>
  <data name="IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} SERIAL NOT NULL</value>
  </data>
  <data name="In" xml:space="preserve">
    <value>IN</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>INSERT INTO {tableName} ({columns}) VALUES ({values})</value>
  </data>
  <data name="InsertWhereNotExists" xml:space="preserve">
    <value>INSERT INTO {tableName} ({columns}) 
SELECT {values}
WHERE NOT EXISTS ( SELECT 1 FROM {tableName} WHERE {filter} )</value>
  </data>
  <data name="Int16IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} SMALLSERIAL NOT NULL</value>
  </data>
  <data name="Int32IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} SERIAL NOT NULL</value>
  </data>
  <data name="Int64IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} BIGSERIAL NOT NULL</value>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>&lt;</value>
  </data>
  <data name="LessThanOrEqual" xml:space="preserve">
    <value>&lt;=</value>
  </data>
  <data name="Like" xml:space="preserve">
    <value>LIKE</value>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>10485760</value>
  </data>
  <data name="Merge" xml:space="preserve">
    <value>INSERT INTO {tableName} ({columns}) VALUES ({values})
ON CONFLICT ({keyColumns}) DO UPDATE SET {columnValues}</value>
  </data>
  <data name="Not" xml:space="preserve">
    <value>NOT</value>
  </data>
  <data name="NotEqual" xml:space="preserve">
    <value>&lt;&gt;</value>
  </data>
  <data name="NullableColumnDefinition" xml:space="preserve">
    <value>{columnName} {sqlType} NULL</value>
  </data>
  <data name="On" xml:space="preserve">
    <value>ON {condition}</value>
  </data>
  <data name="OneEqualsOne" xml:space="preserve">
    <value>1 = 1</value>
  </data>
  <data name="OneEqualsZero" xml:space="preserve">
    <value>1 = 0</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>OR</value>
  </data>
  <data name="PrimaryKeyConstraintDefinition" xml:space="preserve">
    <value>CONSTRAINT PK_{tableName} PRIMARY KEY ({columns})</value>
  </data>
  <data name="QueryEquals" xml:space="preserve">
    <value>{column} = {value}</value>
  </data>
  <data name="QueryGreatherThen" xml:space="preserve">
    <value>{column} &gt; {value}</value>
  </data>
  <data name="QueryLessThen" xml:space="preserve">
    <value>{column} &lt; {value}</value>
  </data>
  <data name="ReservedKeywords" xml:space="preserve">
    <value>ALL
ALLOCATE
AND
ANY
ARE
AS
AUTHORIZATION
AVG
BOTH
CASE
CAST
CHARACTER_LENGTH
CHAR_LENGTH
CHECK
COLLATE
COLUMN
CONNECT
CONSTRAINT
CONVERT
CORRESPONDING
COUNT
CREATE
CROSS
CURRENT_DATE
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_USER
DATE
DEFAULT
DESCRIBE
DISCONNECT
DISTINCT
ELSE
END
END-EXEC
EXCEPT
EXEC
FALSE
FETCH
FOR
FOREIGN
FROM
FULL
GET
GRANT
GROUP
HAVING
IN
INDICATOR
INNER
INTERSECT
INTO
IS
JOIN
LEADING
LEFT
LIKE
LOWER
MAX
MIN
MODULE
NATURAL
NOT
NULL
OCTET_LENGTH
ON
ONLY
OPEN
OR
ORDER
OUTER
OVERLAPS
PRIMARY
REFERENCES
RIGHT
SELECT
SESSION_USER
SOME
SQLSTATE
SUM
SYSTEM_USER
TABLE
THEN
TIMEZONE_HOUR
TIMEZONE_MINUTE
TO
TRAILING
TRANSLATE
TRANSLATION
TRUE
UNION
UNIQUE
UPPER
USER
USING
WHEN
WHENEVER
WHERE
WITH</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>SELECT {columns} FROM {tableName} WHERE {filter}</value>
  </data>
  <data name="SelectCount" xml:space="preserve">
    <value>SELECT COUNT(*) FROM {tableName} WHERE {filter}</value>
  </data>
  <data name="SelectSkipTake" xml:space="preserve">
    <value>SELECT {columns} FROM {tableName} WHERE {filter} ORDER BY {orderBy} LIMIT {take} OFFSET {skip}</value>
  </data>
  <data name="SelectTop1" xml:space="preserve">
    <value>SELECT {columns} FROM {tableName} WHERE {filter} LIMIT 1</value>
  </data>
  <data name="TableExists" xml:space="preserve">
    <value>SELECT CASE WHEN EXISTS ((SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{tableName}')) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>UPDATE {tableName}
SET {columnValues}
WHERE {filter}</value>
  </data>
  <data name="ValueAsColumn" xml:space="preserve">
    <value>{value} AS {column}</value>
  </data>
</root>